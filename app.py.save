rm templates/index.html
nano templates/index.html

nano templates/relink.html

git add .
git commit -m "Switch to full OAuth flow with playlist creation"
git push

from flask import Flask, render_template, request, redirect, session, url_for
import spotipy
from spotipy.oauth2 import SpotifyOAuth
import os

app = Flask(__name__)
app.secret_key = os.urandom(24)

# üî• –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
CLIENT_ID = 'e727213173e141f482270557f6d11e26'
CLIENT_SECRET = '924f0275c3214841a33331d0959e2c4f'
REDIRECT_URI = 'https://playlist-relinker.onrender.com/callback'

SCOPE = 'playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private'

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/login')
def login():
    sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                             client_secret=CLIENT_SECRET,
                             redirect_uri=REDIRECT_URI,
                             scope=SCOPE)
    auth_url = sp_oauth.get_authorize_url()
    return redirect(auth_url)

@app.route('/callback')
def callback():
    sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                             client_secret=CLIENT_SECRET,
                             redirect_uri=REDIRECT_URI,
                             scope=SCOPE)
    session.clear()
    code = request.args.get('code')
    token_info = sp_oauth.get_access_token(code)
    session['token_info'] = token_info
    return redirect(url_for('relink'))

@app.route('/relink', methods=['GET', 'POST'])
def relink():
    token_info = session.get('token_info', None)
    if not token_info:
        return redirect(url_for('login'))

    sp = spotipy.Spotify(auth=token_info['access_token'])
    message = ''
    
    if request.method == 'POST':
        playlist_url = request.form['playlist_url']
        try:
            playlist_id = playlist_url.split("/")[-1].split("?")[0]
            original_playlist = sp.playlist(playlist_id)
            tracks_data = sp.playlist_tracks(playlist_id)
            tracks = tracks_data['items']

            found_tracks = []
            not_found_tracks = []

            for item in tracks:
                track = item['track']
                if track:
                    track_name = track['name']
                    artist_name = track['artists'][0]['name']
                    query = f"{track_name} {artist_name}"

                    search_result = sp.search(q=query, type="track", limit=1)
                    if search_result['tracks']['items']:
                        found_tracks.append(search_result['tracks']['items'][0]['id'])
                    else:
                        not_found_tracks.append(query)

            user_id = sp.current_user()['id']

            new_playlist = sp.user_playlist_create(
                user=user_id,
                name=f"Recovered: {original_playlist['name']}",
                public=True,
                description="Recovered playlist based on local MP3"
            )

            if found_tracks:
                sp.playlist_add_items(playlist_id=new_playlist['id'], items=found_tracks)

            message = f"‚úÖ –ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ–∑–¥–∞–Ω: {new_playlist['external_urls']['spotify']}<br>‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(found_tracks)} —Ç—Ä–µ–∫–æ–≤. ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {len(not_found_tracks)} —Ç—Ä–µ–∫–æ–≤."

        except Exception as e:
            message = f"–û—à–∏–±–∫–∞: {str(e)}"

    return render_template('relink.html', message=message)

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
